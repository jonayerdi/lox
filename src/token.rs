use std::fmt::Display;

use crate::context::Context;

#[derive(Debug, Clone, PartialEq, Eq)]
pub enum TokenValue {
    // Single-character tokens
    LeftParen,
    RightParen,
    LeftBrace,
    RightBrace,
    Comma,
    Dot,
    Minus,
    Plus,
    Semicolon,
    Slash,
    Star,
    // One or two character tokens
    Bang,
    BangEqual,
    Equal,
    EqualEqual,
    Greater,
    GreaterEqual,
    Less,
    LessEqual,
    // Literals
    Identifier(String),
    String(String),
    Number(String),
    // Keywords
    And,
    Class,
    Else,
    False,
    Fun,
    For,
    If,
    Nil,
    Or,
    Print,
    Return,
    Super,
    This,
    True,
    Var,
    While,
}

impl TokenValue {
    pub const fn token_type(&self) -> &'static str {
        match self {
            TokenValue::LeftParen => "grouping",
            TokenValue::RightParen => "grouping",
            TokenValue::LeftBrace => "grouping",
            TokenValue::RightBrace => "grouping",
            TokenValue::Comma => "operator",
            TokenValue::Dot => "operator",
            TokenValue::Minus => "operator",
            TokenValue::Plus => "operator",
            TokenValue::Semicolon => "operator",
            TokenValue::Slash => "operator",
            TokenValue::Star => "operator",
            TokenValue::Bang => "operator",
            TokenValue::BangEqual => "operator",
            TokenValue::Equal => "operator",
            TokenValue::EqualEqual => "operator",
            TokenValue::Greater => "operator",
            TokenValue::GreaterEqual => "operator",
            TokenValue::Less => "operator",
            TokenValue::LessEqual => "operator",
            TokenValue::Identifier(_) => "identifier",
            TokenValue::String(_) => "literal",
            TokenValue::Number(_) => "literal",
            TokenValue::And => "keyword",
            TokenValue::Class => "keyword",
            TokenValue::Else => "keyword",
            TokenValue::False => "keyword",
            TokenValue::Fun => "keyword",
            TokenValue::For => "keyword",
            TokenValue::If => "keyword",
            TokenValue::Nil => "keyword",
            TokenValue::Or => "keyword",
            TokenValue::Print => "keyword",
            TokenValue::Return => "keyword",
            TokenValue::Super => "keyword",
            TokenValue::This => "keyword",
            TokenValue::True => "keyword",
            TokenValue::Var => "keyword",
            TokenValue::While => "keyword",
        }
    }
    pub fn len(&self) -> usize {
        match self {
            TokenValue::LeftParen => 1,
            TokenValue::RightParen => 1,
            TokenValue::LeftBrace => 1,
            TokenValue::RightBrace => 1,
            TokenValue::Comma => 1,
            TokenValue::Dot => 1,
            TokenValue::Minus => 1,
            TokenValue::Plus => 1,
            TokenValue::Semicolon => 1,
            TokenValue::Slash => 1,
            TokenValue::Star => 1,
            TokenValue::Bang => 1,
            TokenValue::BangEqual => 2,
            TokenValue::Equal => 1,
            TokenValue::EqualEqual => 2,
            TokenValue::Greater => 1,
            TokenValue::GreaterEqual => 2,
            TokenValue::Less => 1,
            TokenValue::LessEqual => 2,
            TokenValue::Identifier(s) => s.len(),
            TokenValue::String(s) => s.len(),
            TokenValue::Number(s) => s.len(),
            TokenValue::And => 3,
            TokenValue::Class => 5,
            TokenValue::Else => 4,
            TokenValue::False => 5,
            TokenValue::Fun => 3,
            TokenValue::For => 3,
            TokenValue::If => 2,
            TokenValue::Nil => 3,
            TokenValue::Or => 2,
            TokenValue::Print => 5,
            TokenValue::Return => 6,
            TokenValue::Super => 5,
            TokenValue::This => 4,
            TokenValue::True => 4,
            TokenValue::Var => 3,
            TokenValue::While => 5,
        }
    }
}

impl Display for TokenValue {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            TokenValue::LeftParen => write!(f, "("),
            TokenValue::RightParen => write!(f, ")"),
            TokenValue::LeftBrace => write!(f, "{{"),
            TokenValue::RightBrace => write!(f, "}}"),
            TokenValue::Comma => write!(f, ","),
            TokenValue::Dot => write!(f, "."),
            TokenValue::Minus => write!(f, "-"),
            TokenValue::Plus => write!(f, "+"),
            TokenValue::Semicolon => write!(f, ";"),
            TokenValue::Slash => write!(f, "/"),
            TokenValue::Star => write!(f, "*"),
            TokenValue::Bang => write!(f, "!"),
            TokenValue::BangEqual => write!(f, "!="),
            TokenValue::Equal => write!(f, "="),
            TokenValue::EqualEqual => write!(f, "=="),
            TokenValue::Greater => write!(f, ">"),
            TokenValue::GreaterEqual => write!(f, ">="),
            TokenValue::Less => write!(f, "<"),
            TokenValue::LessEqual => write!(f, "<="),
            TokenValue::Identifier(i) => write!(f, "{}", i),
            TokenValue::String(s) => write!(f, "\"{}\"", s),
            TokenValue::Number(n) => write!(f, "{}", n),
            TokenValue::And => write!(f, "and"),
            TokenValue::Class => write!(f, "class"),
            TokenValue::Else => write!(f, "else"),
            TokenValue::False => write!(f, "false"),
            TokenValue::Fun => write!(f, "fun"),
            TokenValue::For => write!(f, "for"),
            TokenValue::If => write!(f, "if"),
            TokenValue::Nil => write!(f, "nil"),
            TokenValue::Or => write!(f, "or"),
            TokenValue::Print => write!(f, "print"),
            TokenValue::Return => write!(f, "return"),
            TokenValue::Super => write!(f, "super"),
            TokenValue::This => write!(f, "this"),
            TokenValue::True => write!(f, "true"),
            TokenValue::Var => write!(f, "var"),
            TokenValue::While => write!(f, "while"),
        }
    }
}

pub type TokenContext = Context;

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Token {
    pub value: TokenValue,
    pub context: TokenContext,
}
